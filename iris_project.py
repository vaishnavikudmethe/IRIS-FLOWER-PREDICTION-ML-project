# -*- coding: utf-8 -*-
"""Iris project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o9Y_2Q6RVTCWQqEMwiP5FO5aA9JOS6yu
"""

# Commented out IPython magic to ensure Python compatibility.
#problem stste




import numpy as np
import pandas as pd# use for data
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df=pd.read_csv("/content/sample_data/iris.csv")
df

df.head()

df.tail()

#EDA
df.info()

df.describe()

df.columns

df[['sepal_length', 'sepal_width']]

df[['petal_length']]

df['Total']=df['sepal_length']+df['sepal_width']+df['petal_length']+df['petal_width']
df
    #featuring engineering use to make new features in dataset

df.drop('Total',axis=1,inplace=True)
    #true premenant delete Total column name and 1 is col

df

#scatter plot
plt.figure(figsize=(10,5))
plt.scatter(df['sepal_length'],df['sepal_width'])
plt.xlabel('sepal_length')
plt.ylabel('sepal_width')

plt.figure(figsize=(10,5))
plt.scatter(df['petal_length'],df['petal_width'])
plt.xlabel('petal_length')
plt.ylabel('petal_width')

#scatter plot
plt.figure(figsize=(10,5))
sns.scatterplot(x='petal_length', y='petal_width', hue='species', data=df)
plt.xlabel('petal_length')
plt.ylabel('petal_width')

#scatter plot using matplotlib and seaborn  sl,sw   sl,pl   sl,pw    sw,pl    sw,pw   pl,pw

df.shape   #150 row and 5 col

sns.countplot(x='species',data=df)

sns.pairplot(df,hue='species')

#heatmaps
sns.heatmap(df.drop('species', axis=1).corr('pearson'),annot=True)

df['species'].unique()

df['species'].nunique()

X=df[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]
y=df['species']
X

#Split the data into tran and test
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,stratify=y)


print("X_train :-",X_train.shape)
print("X_test :-",X_train.shape)
print("y_train :-",y_train.shape)
print("y_test :-",y_train.shape)

from sklearn import neighbors

from sklearn.neighbors import KNeighborsClassifier

#Model creation
model=KNeighborsClassifier(n_neighbors=5)
print("Model Created..!!")

#model training
model.fit(X_train,y_train)
print("Model Trained....!!")

#Finding pred on test data.
y_pred=model.predict(X_test)
print("y_pred done.....")
from sklearn.metrics import accuracy_score
acc=accuracy_score(y_pred,y_test)
print("Accuracy :-",acc*100)

# 5.0 3.6 1.4 0.2 setosa

# Create a new input data point as a pandas DataFrame
new_data = pd.DataFrame([[5.0, 3.6, 1.4, 0.2]], columns=['sepal_length', 'sepal_width', 'petal_length', 'petal_width'])

# Use the trained model to make a prediction
prediction = model.predict(new_data)

print(f"The predicted species is: {prediction[0]}")

#How to Find Best Value

k_value = list(range(1,30,2))
from sklearn.metrics import accuracy_score
accuracy = []
for k in k_value:
  #modelCreation
  model = KNeighborsClassifier(n_neighbors=5)

  #model Training
  model.fit(X_train,y_train)

  #including Pred on test data
  y_pred = model.predict(X_test)

  acc = accuracy_score(y_pred,y_test)
  accuracy.append(acc)

plt.plot(k_value,accuracy,'*-')
plt.xlabel("k-Value")
plt.ylabel("Accuracy")

from sklearn.linear_model import LogisticRegression

#modelCreation
model = LogisticRegression()
print("Model Created...!")

#model Training
model.fit(X_train,y_train)
print("Model Trained...!")

#including Pred on test data
y_pred = model.predict(X_test)
print('y_pred done...!')

from sklearn.metrics import accuracy_score
acc = accuracy_score(y_pred,y_test)
print("Accuracy :-",acc*100)

from sklearn.svm import SVC

#modelCreation
model = SVC()
print("Model Created...!")

#model Training
model.fit(X_train,y_train)
print("Model Trained...!")

#including Pred on test data
y_pred = model.predict(X_test)
print('y_pred done...!')

from sklearn.metrics import accuracy_score
acc = accuracy_score(y_pred,y_test)
print("Accuracy :-",acc*100)

from sklearn.naive_bayes import GaussianNB

#modelCreation
model = GaussianNB()
print("Model Created...!")

#model Training
model.fit(X_train,y_train)
print("Model Trained...!")

#including Pred on test data
y_pred = model.predict(X_test)
print('y_pred done...!')

from sklearn.metrics import accuracy_score
acc = accuracy_score(y_pred,y_test)
print("Accuracy :-",acc*100)

import joblib
joblib.dump(model,'ML_Model.pkl')
print('model saved')